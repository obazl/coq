load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_signature",
)

package(default_visibility = ["//visibility:public"])

COQPP = "//coqpp"

################################################################
ocaml_archive(
    name     = "omega_plugin",
    resolver = "Omega_plugin",
    shared   = True,
    opts = ["-rectypes"],
    modules = [
        ":_Omega",
        ":_Coq_omega",
        ":_G_omega",
    ]
)

################################################################
#############
ocaml_module(
    name    = "_Coq_omega",
    struct  = "coq_omega.ml",
    sig     = "_Coq_omega.cmi",
    opts    = [
        "-rectypes",
        "-w", "-9", # labels not bound
        "-w", "-27" # unused variable
    ],
    deps = [
        "//tactics:_Contradiction",
        "//tactics:_Equality",
        "//tactics:_Tacticals",
        "//tactics:_Tactics",
        ":_Omega"
    ],
)

######
ocaml_signature(
    name = "_Coq_omega.cmi",
    src  = "coq_omega.mli",
    opts = ["-rectypes"],
    deps = [
        "//engine:_Proofview"
    ],
)

#############
ocaml_module(
    name    = "_Omega",
    struct  = "omega.ml",
    opts = [
        "-rectypes",
        "-w", "-9", # labels not bound
        "-w", "-27" # unused variable
    ],
    deps = [
        "//lib:_Util",
    ],
)

#############
ocaml_module(
    name    = "_G_omega",
    struct  = "g_omega.ml",
    opts = [
        "-rectypes",
        "-w", "-27" # unused variable
    ],
    deps = [
        "//vernac:_Mltop",
        "//plugins/ltac:ltac_plugin",
        ":_Coq_omega"
    ],
)

########
genrule(
    name = "gen_g_omega",
    tools = [COQPP],
    srcs = [
        "g_omega.mlg"
    ],
    outs = [
        "g_omega.ml"
    ],
    cmd = "\n".join([
        "$(location {tool}) $(location g_omega.mlg)".format( tool = COQPP ),
        "cp plugins/omega/g_omega.ml $(location g_omega.ml);"
    ]),
)


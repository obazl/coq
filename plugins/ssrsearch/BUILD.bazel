load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_signature",
)

package(default_visibility = ["//visibility:public"])

DEPS = []
DEPS_OPAM = []

COQPP = "//coqpp:coqpp_main"

################################################################
ocaml_archive(
    name   = "ssrsearch",
    modules = [
        ":_G_search",
        ":_Ssrsearch_plugin"
    ]
)

#############
ocaml_module(
    name   = "_Ssrsearch_plugin",
    struct = "ssrsearch_plugin.ml",
    opts   = [
        "-no-alias-deps",
        "-w", "-49", # no cmi file was found in path for module
    ],
)

SUBMODS = [
    "G_search",
]

SUBMODULES = [
    'echo "module {m} = {m}" >> $@'.format( m = SUBMOD )
    for SUBMOD in SUBMODS
]

########
genrule(
    name = "gen_plugin_resolver",
    outs = [
        "ssrsearch_plugin.ml"
    ],
    cmd = "\n".join(SUBMODULES),
)

################################################################

#############
ocaml_module(
    name    = "_G_search",
    struct  = "g_search.ml",
    opts = [
        "-rectypes",
        "-w", "-27" # unused variable
    ],
    deps = [
        "//plugins/ltac",
        "//plugins/ssr",
        "//vernac:_Mltop",
    ],
)

########
genrule(
    name = "gen_g_search",
    tools = [COQPP],
    srcs = [
        "g_search.mlg"
    ],
    outs = [
        "g_search.ml"
    ],
    cmd = "\n".join([
        "$(location {tool}) $(location g_search.mlg)".format( tool = COQPP ),
        "cp plugins/ssrsearch/g_search.ml $(location g_search.ml);"
    ]),
)


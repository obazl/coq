load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_library",
    "ocaml_module",
    "ocaml_signature",
)

package(default_visibility = ["//visibility:public"])

DEPS = []
DEPS_OPAM = []

#################
ocaml_library(
    name = "toplevel",
    modules = [
        ":_Ccompile",
        ":_Coqc",
        ":_Coqcargs",
        ":_Coqloop",
        ":_Coqrc",
        ":_Coqtop",
        ":_G_toplevel",
        ":_Vernac",
        ":_WorkerLoop",
    ],
)

#############
ocaml_module(
    name    = "_Ccompile",
    struct  = "ccompile.ml",
    sig     = "_Ccompile.cmi",
    opts = [
        "-rectypes",
        "-w", "-27" # unused variable
    ],
    deps = [
        "//stm:_Vio_checking",
        ":_Coqrc"
    ],
)

######
ocaml_signature(
    name = "_Ccompile.cmi",
    src  = "ccompile.mli",
    opts = ["-rectypes"],
    deps = [
        "//sysinit:_Coqargs",
        ":_Coqcargs",
        ":_Vernac"
    ],
)

#############
ocaml_module(
    ## this module contains the "main" routine.
    name    = "_Coqc",
    struct  = "coqc.ml",
    sig     = "_Coqc.cmi",
    opts = ["-rectypes"],
    deps = [
        # build-time deps:
        "//clib:_CUnix",
        "//vernac:_Vernacstate",
        ":_Coqcargs",
        ":_Coqtop",
        "//parsing:_G_prim",
        "//parsing:_G_constr",
        "//vernac:_G_proofs",
        "//vernac:_G_vernac",
        "//tactics:_Autorewrite",
        "//tactics:_Contradiction",
        "//tactics:_Elim",
        "//tactics:_Eqdecide",
        "//tactics:_Inv",
    ],
    deps_runtime = [
        # "//theories/Arith:LibArith"
        # "//parsing:_G_prim",
        # "//parsing:_G_constr",
        # "//vernac:_G_proofs",
        # "//vernac:_G_vernac",
        # "//tactics:_Autorewrite",
        # "//tactics:_Contradiction",
        # "//tactics:_Elim",
        # "//tactics:_Eqdecide",
        # "//tactics:_Inv",
    ]
)

######
ocaml_signature(
    name = "_Coqc.cmi",
    src  = "coqc.mli",
    opts = [],
    deps = [],
)

#############
ocaml_module(
    name    = "_Coqcargs",
    struct  = "coqcargs.ml",
    sig     = "_Coqcargs.cmi",
    opts = ["-rectypes"],
    deps = [
        "//vernac:_Topfmt"
    ],
)

######
ocaml_signature(
    name = "_Coqcargs.cmi",
    src  = "coqcargs.mli",
    opts = ["-rectypes"],
    deps = [
        "//interp:_Dumpglob"
    ],
)

#############
ocaml_module(
    name    = "_Coqloop",
    struct  = "coqloop.ml",
    sig     = "_Coqloop.cmi",
    opts = [
        "-rectypes",
        "-w", "-9", # labels not bound
        "-w", "-27" # unused variable
    ],
    deps = [
        ":_G_toplevel"
    ],
)

######
ocaml_signature(
    name = "_Coqloop.cmi",
    src  = "coqloop.mli",
    opts = ["-rectypes"],
    deps = [
        "//stm:_Stm",
        ":_Vernac"
    ],
)

#############
ocaml_module(
    name    = "_Coqrc",
    struct  = "coqrc.ml",
    sig     = "_Coqrc.cmi",
    opts = ["-rectypes"],
    deps = [
    ],
)

######
ocaml_signature(
    name = "_Coqrc.cmi",
    src  = "coqrc.mli",
    opts = ["-rectypes"],
    deps = [
        ":_Vernac"
    ],
)

#############
ocaml_module(
    name    = "_Coqtop",
    struct  = "coqtop.ml",
    sig     = "_Coqtop.cmi",
    opts = [
        "-rectypes",
        "-w", "-9", # labels not bound
        "-linkall",
    ],
    deps = [
        "//parsing:_G_prim",
        "//parsing:_G_constr",
        "//vernac:_G_proofs",
        "//vernac:_G_vernac",

        "//stm:_Stmargs",
        ":_Ccompile",
        ":_Coqloop",
        "//sysinit:_Coqinit",
        # "//tactics:Autorewrite"
        # "//theories/Arith:LibArith",
        # "//theories/Array:vfiles",
        # "//theories/Bool:vfiles",
        # "//theories/Classes:vfiles",
        # "//theories/Compat:vfiles",
        # "//theories/FSets:vfiles",
        # "//theories/Floats:vfiles",
        # "//theories/Init:vfiles",
        # "//theories/Lists:vfiles",
        # "//theories/Logic:vfiles",
        # "//theories/MSets:vfiles",
        # "//theories/NArith:vfiles",
        # "//theories/Numbers:vfiles",
        # "//theories/PArith:vfiles",
        # "//theories/Program:vfiles",
        # "//theories/QArith:vfiles",
        # "//theories/Reals:vfiles",
        # "//theories/Relations:vfiles",
        # "//theories/Setoids:vfiles",
        # "//theories/Sets:vfiles",
        # "//theories/Sorting:vfiles",
        # "//theories/Strings:vfiles",
        # "//theories/Structures:vfiles",
        # "//theories/Unicode:vfiles",
        # "//theories/Vectors:vfiles",
        # "//theories/Wellfounded:vfiles",
        # "//theories/ZArith:vfiles",
        # "//theories/btauto:vfiles",
        # "//theories/derive:vfiles",
        # "//theories/extraction:vfiles",
        # "//theories/funind:vfiles",
        # "//theories/micromega:vfiles",
        # "//theories/nsatz:vfiles",
        # "//theories/omega:vfiles",
        # "//theories/rtauto:vfiles",
        # "//theories/setoid_ring:vfiles",
        # "//theories/ssr:vfiles",
        # "//theories/ssrmatching:vfiles",
        # "//theories/ssrsearch:vfiles",

        # "//plugins/btauto:btauto_plugin",
        # "//plugins/cc:cc_plugin",
        # "//plugins/derive:derive_plugin",
        # "//plugins/extraction:extraction_plugin",
        # "//plugins/firstorder:ground_plugin",
        # "//plugins/funind:recdef_plugin",
        # "//plugins/ltac:ltac_plugin",
        # "//plugins/ltac:tauto_plugin",
        # "//plugins/micromega:micromega_plugin",
        # "//plugins/micromega:zify_plugin",
        # "//plugins/nsatz:nsatz_plugin",
        # "//plugins/omega:omega_plugin",
        # "//plugins/ring:ring_plugin",
        # "//plugins/rtauto:rtauto_plugin",
        # "//plugins/ssr:ssreflect_plugin",
        # "//plugins/ssrmatching:ssrmatching_plugin",
        # "//plugins/ssrsearch:ssrsearch_plugin",
        # "//plugins/syntax:float_syntax_plugin",
        # "//plugins/syntax:number_string_notation_plugin",
    ],
)

######
ocaml_signature(
    name = "_Coqtop.cmi",
    src  = "coqtop.mli",
    opts = ["-rectypes"],
    deps = [
        "//stm:_Stm",
        "//sysinit:_Coqargs",
        "//sysinit:_Usage.cmi",
        ":_Coqcargs",
        ":_Vernac"
    ],
)

#############
ocaml_module(
    name    = "_G_toplevel",
    struct  = "g_toplevel.ml",
    opts = [
        "-rectypes",
        # "-w", "-9", # labels not bound
        "-w", "-27" # unused variable
    ],
    deps = [
        "//parsing:_Pcoq",
        "//vernac:_Pvernac",
        "//vernac:_Vernacexpr"
    ]
)

###########################
TOOL = "//coqpp:coqpp"

########
genrule(
    name = "gentoplevel",
    tools = [TOOL],
    srcs = [
        "g_toplevel.mlg",
    ],
    outs = [
        "g_toplevel.ml",
    ],
    cmd = "\n".join([
        "$(location {tool}) $(location g_toplevel.mlg);".format( tool = TOOL ),
        "cp toplevel/g_toplevel.ml $(location g_toplevel.ml);",
    ]),
)

#############
ocaml_module(
    name    = "_Vernac",
    struct  = "vernac.ml",
    sig     = "_Vernac.cmi",
    opts = [
        "-rectypes",
        "-w", "-9", # labels not bound
    ],
    deps = [
    ],
)

######
ocaml_signature(
    name = "_Vernac.cmi",
    src  = "vernac.mli",
    opts = ["-rectypes"],
    deps = [
        "//stm:_Stm"
    ],
)

#############
ocaml_module(
    name    = "_WorkerLoop",
    struct  = "workerLoop.ml",
    sig     = "_WorkerLoop.cmi",
    opts = ["-rectypes"],
    deps = [
        ":_Coqtop"
    ],
)

######
ocaml_signature(
    name = "_WorkerLoop.cmi",
    src  = "workerLoop.mli",
    opts = [],
    deps = [
        "//stm:_Stmargs"
    ],
)




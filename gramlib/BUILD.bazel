load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_module",
    "ocaml_signature",
)

package(default_visibility = ["//visibility:public"])

DEPS = []

DEPS_OPAM = []

#############
ocaml_archive(
    name   = "gramlib",
    # shared = True,
    resolver = "Gramlib",
    opts = ["-no-alias-deps"],
    modules = [
        ":_Ploc",
        ":_Plexing",
        ":_Gramext",
        ":_Grammar",
        # ":_Gramlib"
    ],
)

#############
# ocaml_module(
#     name   = "_Gramlib",
#     struct = "gramlib.ml",
#     opts   = [
#         "-no-alias-deps",
#         "-w", "-49", # no cmi file was found in path for module
#     ],
# )

# FLOAT_SUBMODS = [
#     "Gramext",
#     "Grammar",
#     "Plexing",
#     "Ploc"
# ]

# FLOAT_SUBMODULES = [
#     'echo "module {m} = {m}" >> $@'.format( m = SUBMOD )
#     for SUBMOD in FLOAT_SUBMODS
# ]

# ########
# genrule(
#     name = "gen_plugin_resolver",
#     outs = [
#         "gramlib.ml"
#     ],
#     cmd = "\n".join(FLOAT_SUBMODULES),
# )

################################################################
#############
ocaml_module(
    name   = "_Gramext",
    struct = "gramext.ml",
    sig    = "_Gramext.cmi",
    deps = DEPS + [
        ":_Plexing",
    ],
    deps_opam = DEPS_OPAM
)

#####
ocaml_signature(
    name = "_Gramext.cmi",
    src = "gramext.mli",
    deps = DEPS + [],
    deps_opam = DEPS_OPAM
)

#############
ocaml_module(
    name   = "_Grammar",
    struct = "grammar.ml",
    sig    = "_Grammar.cmi",
    opts    = [
        "-w", "-27" # unused variable
    ],
    deps = DEPS + [
        "//lib:_Feedback",
    ],
    deps_opam = DEPS_OPAM
)

#####
ocaml_signature(
    name = "_Grammar.cmi",
    src = "grammar.mli",
    deps = DEPS + [
        ":_Ploc",
        ":_Plexing",
        ":_Gramext",
    ],
    deps_opam = DEPS_OPAM
)

#############
ocaml_module(
    name   = "_Plexing",
    struct = "plexing.ml",
    sig    = "_Plexing.cmi",
    deps = DEPS,
    deps_opam = DEPS_OPAM + [
        "compiler-libs.common"
    ]
)

#####
ocaml_signature(
    name = "_Plexing.cmi",
    src  = "plexing.mli",
    deps = DEPS + [
        "//lib:_Loc",
        # "//lib:_Util",
        "//lib:_Util.cmi",
        # ":_Util"
        ":_Ploc"
    ],
    deps_opam = DEPS_OPAM + [
        "base",
        "ocaml-compiler-libs"
    ]
)

#############
ocaml_module(
    name   = "_Ploc",
    struct = "ploc.ml",
    sig    = "_Ploc.cmi",
    deps = DEPS + [
    ],
    deps_opam = DEPS_OPAM
)

#####
ocaml_signature(
    name = "_Ploc.cmi",
    src = "ploc.mli",
    deps = DEPS + [
        "//lib:_Loc"
    ],
    deps_opam = DEPS_OPAM
)

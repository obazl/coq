load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_executable",
    "ocaml_module",
    "ocaml_signature",
)

package(default_visibility = ["//visibility:public"])

exports_files(["coq_config.mli"])

ocaml_archive(
    name = "config",
    modules = [
        "//:_Coq_config"
    ]
)

#################
ocaml_executable(
    name = "list_plugins",
    main = "_List_plugins",
    visibility = ["//visibility:public"],
)

#############
ocaml_module(
    name    = "_List_plugins",
    struct  = "list_plugins.ml",
    deps = [
    ],
)

################################
TOOL = ":list_plugins"

########
genrule(
    name = "genplugins",
    tools = [TOOL],
    outs = ["plugin_list"],
    cmd = "\n".join([
        "$(location {tool}) enum > $(location coq_instruct.h)".format( tool = TOOL ),
    ]),
)

#############
ocaml_module(
    name    = "_Vmsymtable",
    struct  = "vmsymtable.ml",
    sig     = "_Vmsymtable.cmi",
    deps = [
    ],
)

######
ocaml_signature(
    name = "_Vmsymtable.cmi",
    src  = "vmsymtable.mli",
    opts = [],
    deps = [],
)

################################################################
##    GENERATED FILES    ##

TOOL = ":genOpcodeFiles"

########
genrule(
    name = "genvmopcodes",

    tools = [TOOL],
    outs = ["vmopcodes.ml"],
    cmd = "\n".join([
        "$(location {tool}) copml > $(location vmopcodes.ml)".format( tool = TOOL ),
    ]),
)

########
genrule(
    name = "genuint63",
    srcs = select({
        "//bzl/host:m32": ["uint63_31.ml"],
        "//bzl/host:m64": ["uint63_63.ml"],
    }),
    outs = ["uint63.ml"],
    cmd = "\n".join([
        "cp $< $@"
    ]),
)

########
genrule(
    name = "genfloat64",
    srcs = select({
        "//bzl/host:m32": ["float64_31.ml"],
        "//bzl/host:m64": ["float64_63.ml"],
    }),
    outs = ["float64.ml"],
    cmd = "\n".join([
        "cp $< $@"
    ]),
)

################################################################
#################
ocaml_executable(
    name = "genOpcodeFiles",
    main = "_GenOpcodeFiles",
    visibility = ["//visibility:public"],
)

#############
ocaml_module(
    name    = "_GenOpcodeFiles",
    struct  = "genOpcodeFiles.ml",
)

